/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Greeter,
  GreeterInterface,
} from "../../../contracts/op-cross-messages/Greeter";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "origin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "xorigin",
        type: "address",
      },
    ],
    name: "SetGreeting",
    type: "event",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000a7a38038062000a7a8339818101604052810190620000379190620002a4565b80600090805190602001906200004f92919062000057565b50506200035a565b828054620000659062000324565b90600052602060002090601f016020900481019282620000895760008555620000d5565b82601f10620000a457805160ff1916838001178555620000d5565b82800160010185558215620000d5579182015b82811115620000d4578251825591602001919060010190620000b7565b5b509050620000e49190620000e8565b5090565b5b8082111562000103576000816000905550600101620000e9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001708262000125565b810181811067ffffffffffffffff8211171562000192576200019162000136565b5b80604052505050565b6000620001a762000107565b9050620001b5828262000165565b919050565b600067ffffffffffffffff821115620001d857620001d762000136565b5b620001e38262000125565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b8381111562000220576000848401525b50505050565b60006200023d6200023784620001ba565b6200019b565b9050828152602081018484840111156200025c576200025b62000120565b5b62000269848285620001f0565b509392505050565b600082601f8301126200028957620002886200011b565b5b81516200029b84826020860162000226565b91505092915050565b600060208284031215620002bd57620002bc62000111565b5b600082015167ffffffffffffffff811115620002de57620002dd62000116565b5b620002ec8482850162000271565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200033d57607f821691505b60208210811415620003545762000353620002f5565b5b50919050565b610710806200036a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a41368621461003b578063cfae321714610057575b600080fd5b610055600480360381019061005091906104b5565b610075565b005b61005f6100d1565b60405161006c9190610586565b60405180910390f35b806000908051906020019061008b9291906102b8565b507f2cae530c5be69254f4523a86f6aa90751f1e4b1ffffca6bbd3330da2ec6437b733326100b7610163565b6040516100c6939291906105e9565b60405180910390a150565b6060600080546100e09061064f565b80601f016020809104026020016040519081016040528092919081815260200182805461010c9061064f565b80156101595780601f1061012e57610100808354040283529160200191610159565b820191906000526020600020905b81548152906001019060200180831161013c57829003601f168201915b5050505050905090565b60008060009050600146141561018b577325ace71c97b33cc4729cf772ae268934f7ab5fa190505b602a4614156101ac57734361d0f75a0186c05f971c566dc6bea5957483fd90505b60054614156101cd57735086d1eef304eb5284a0f6720f79403b4e9be29490505b600a4614806101dc5750604546145b806101e857506101a446145b156102055773420000000000000000000000000000000000000790505b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102425760009150506102b5565b8073ffffffffffffffffffffffffffffffffffffffff16636e296e456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b191906106ad565b9150505b90565b8280546102c49061064f565b90600052602060002090601f0160209004810192826102e6576000855561032d565b82601f106102ff57805160ff191683800117855561032d565b8280016001018555821561032d579182015b8281111561032c578251825591602001919060010190610311565b5b50905061033a919061033e565b5090565b5b8082111561035757600081600090555060010161033f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103c282610379565b810181811067ffffffffffffffff821117156103e1576103e061038a565b5b80604052505050565b60006103f461035b565b905061040082826103b9565b919050565b600067ffffffffffffffff8211156104205761041f61038a565b5b61042982610379565b9050602081019050919050565b82818337600083830152505050565b600061045861045384610405565b6103ea565b90508281526020810184848401111561047457610473610374565b5b61047f848285610436565b509392505050565b600082601f83011261049c5761049b61036f565b5b81356104ac848260208601610445565b91505092915050565b6000602082840312156104cb576104ca610365565b5b600082013567ffffffffffffffff8111156104e9576104e861036a565b5b6104f584828501610487565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561053857808201518184015260208101905061051d565b83811115610547576000848401525b50505050565b6000610558826104fe565b6105628185610509565b935061057281856020860161051a565b61057b81610379565b840191505092915050565b600060208201905081810360008301526105a0818461054d565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105d3826105a8565b9050919050565b6105e3816105c8565b82525050565b60006060820190506105fe60008301866105da565b61060b60208301856105da565b61061860408301846105da565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061066757607f821691505b6020821081141561067b5761067a610620565b5b50919050565b61068a816105c8565b811461069557600080fd5b50565b6000815190506106a781610681565b92915050565b6000602082840312156106c3576106c2610365565b5b60006106d184828501610698565b9150509291505056fea2646970667358221220397554bcf8f6af0a8dae05006311e90aa0ac17a34d6bf66be3534c1408af85ea64736f6c634300080b0033";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _greeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  override getDeployTransaction(
    _greeting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  override attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  override connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
