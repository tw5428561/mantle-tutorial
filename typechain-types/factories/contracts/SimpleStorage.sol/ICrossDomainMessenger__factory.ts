/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ICrossDomainMessenger,
  ICrossDomainMessengerInterface,
} from "../../../contracts/SimpleStorage.sol/ICrossDomainMessenger";

const _abi = [
  {
    inputs: [],
    name: "xDomainMessageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636e296e4514602d575b600080fd5b60336047565b604051603e919060a8565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609482606b565b9050919050565b60a281608b565b82525050565b600060208201905060bb6000830184609b565b9291505056fea264697066735822122000d24836ae96854787568414e2b325d7557f3e48486ad6dc0df2b71793ac6b6664736f6c634300080b0033";

type ICrossDomainMessengerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ICrossDomainMessengerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ICrossDomainMessenger__factory extends ContractFactory {
  constructor(...args: ICrossDomainMessengerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ICrossDomainMessenger> {
    return super.deploy(overrides || {}) as Promise<ICrossDomainMessenger>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ICrossDomainMessenger {
    return super.attach(address) as ICrossDomainMessenger;
  }
  override connect(signer: Signer): ICrossDomainMessenger__factory {
    return super.connect(signer) as ICrossDomainMessenger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ICrossDomainMessengerInterface {
    return new utils.Interface(_abi) as ICrossDomainMessengerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICrossDomainMessenger {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ICrossDomainMessenger;
  }
}
