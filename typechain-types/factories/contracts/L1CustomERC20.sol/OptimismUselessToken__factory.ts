/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OptimismUselessToken,
  OptimismUselessTokenInterface,
} from "../../../contracts/L1CustomERC20.sol/OptimismUselessToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_a",
        type: "string",
      },
      {
        internalType: "string",
        name: "_b",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001900380380620019008339818101604052810190620000379190620002c2565b818181600390805190602001906200005192919062000075565b5080600490805190602001906200006a92919062000075565b5050505050620003ac565b828054620000839062000376565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200018e8262000143565b810181811067ffffffffffffffff82111715620001b057620001af62000154565b5b80604052505050565b6000620001c562000125565b9050620001d3828262000183565b919050565b600067ffffffffffffffff821115620001f657620001f562000154565b5b620002018262000143565b9050602081019050919050565b60005b838110156200022e57808201518184015260208101905062000211565b838111156200023e576000848401525b50505050565b60006200025b6200025584620001d8565b620001b9565b9050828152602081018484840111156200027a57620002796200013e565b5b620002878482856200020e565b509392505050565b600082601f830112620002a757620002a662000139565b5b8151620002b984826020860162000244565b91505092915050565b60008060408385031215620002dc57620002db6200012f565b5b600083015167ffffffffffffffff811115620002fd57620002fc62000134565b5b6200030b858286016200028f565b925050602083015167ffffffffffffffff8111156200032f576200032e62000134565b5b6200033d858286016200028f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038f57607f821691505b60208210811415620003a657620003a562000347565b5b50919050565b61154480620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101a357806395d89b41146101d3578063a457c2d7146101f1578063a9059cbb14610221578063dd62ed3e14610251578063de5f72fd14610281576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c161028b565b6040516100ce9190610d92565b60405180910390f35b6100f160048036038101906100ec9190610e4d565b61031d565b6040516100fe9190610ea8565b60405180910390f35b61010f610340565b60405161011c9190610ed2565b60405180910390f35b61013f600480360381019061013a9190610eed565b61034a565b60405161014c9190610ea8565b60405180910390f35b61015d610379565b60405161016a9190610f5c565b60405180910390f35b61018d60048036038101906101889190610e4d565b610382565b60405161019a9190610ea8565b60405180910390f35b6101bd60048036038101906101b89190610f77565b61042c565b6040516101ca9190610ed2565b60405180910390f35b6101db610474565b6040516101e89190610d92565b60405180910390f35b61020b60048036038101906102069190610e4d565b610506565b6040516102189190610ea8565b60405180910390f35b61023b60048036038101906102369190610e4d565b6105f0565b6040516102489190610ea8565b60405180910390f35b61026b60048036038101906102669190610fa4565b610613565b6040516102789190610ed2565b60405180910390f35b61028961069a565b005b60606003805461029a90611013565b80601f01602080910402602001604051908101604052809291908181526020018280546102c690611013565b80156103135780601f106102e857610100808354040283529160200191610313565b820191906000526020600020905b8154815290600101906020018083116102f657829003601f168201915b5050505050905090565b6000806103286106af565b90506103358185856106b7565b600191505092915050565b6000600254905090565b6000806103556106af565b9050610362858285610882565b61036d85858561090e565b60019150509392505050565b60006012905090565b60008061038d6106af565b9050610421818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461041c9190611074565b6106b7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461048390611013565b80601f01602080910402602001604051908101604052809291908181526020018280546104af90611013565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b5050505050905090565b6000806105116106af565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce9061113c565b60405180910390fd5b6105e482868684036106b7565b60019250505092915050565b6000806105fb6106af565b905061060881858561090e565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6106ad33683635c9adc5dea00000610b8f565b565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e906111ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078e90611260565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108759190610ed2565b60405180910390a3505050565b600061088e8484610613565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461090857818110156108fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f1906112cc565b60405180910390fd5b61090784848484036106b7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561097e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109759061135e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e5906113f0565b60405180910390fd5b6109f9838383610cef565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7690611482565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b129190611074565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b769190610ed2565b60405180910390a3610b89848484610cf4565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf6906114ee565b60405180910390fd5b610c0b60008383610cef565b8060026000828254610c1d9190611074565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c729190611074565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610cd79190610ed2565b60405180910390a3610ceb60008383610cf4565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d33578082015181840152602081019050610d18565b83811115610d42576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d6482610cf9565b610d6e8185610d04565b9350610d7e818560208601610d15565b610d8781610d48565b840191505092915050565b60006020820190508181036000830152610dac8184610d59565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610de482610db9565b9050919050565b610df481610dd9565b8114610dff57600080fd5b50565b600081359050610e1181610deb565b92915050565b6000819050919050565b610e2a81610e17565b8114610e3557600080fd5b50565b600081359050610e4781610e21565b92915050565b60008060408385031215610e6457610e63610db4565b5b6000610e7285828601610e02565b9250506020610e8385828601610e38565b9150509250929050565b60008115159050919050565b610ea281610e8d565b82525050565b6000602082019050610ebd6000830184610e99565b92915050565b610ecc81610e17565b82525050565b6000602082019050610ee76000830184610ec3565b92915050565b600080600060608486031215610f0657610f05610db4565b5b6000610f1486828701610e02565b9350506020610f2586828701610e02565b9250506040610f3686828701610e38565b9150509250925092565b600060ff82169050919050565b610f5681610f40565b82525050565b6000602082019050610f716000830184610f4d565b92915050565b600060208284031215610f8d57610f8c610db4565b5b6000610f9b84828501610e02565b91505092915050565b60008060408385031215610fbb57610fba610db4565b5b6000610fc985828601610e02565b9250506020610fda85828601610e02565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061102b57607f821691505b6020821081141561103f5761103e610fe4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061107f82610e17565b915061108a83610e17565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110bf576110be611045565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611126602583610d04565b9150611131826110ca565b604082019050919050565b6000602082019050818103600083015261115581611119565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111b8602483610d04565b91506111c38261115c565b604082019050919050565b600060208201905081810360008301526111e7816111ab565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061124a602283610d04565b9150611255826111ee565b604082019050919050565b600060208201905081810360008301526112798161123d565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112b6601d83610d04565b91506112c182611280565b602082019050919050565b600060208201905081810360008301526112e5816112a9565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611348602583610d04565b9150611353826112ec565b604082019050919050565b600060208201905081810360008301526113778161133b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006113da602383610d04565b91506113e58261137e565b604082019050919050565b60006020820190508181036000830152611409816113cd565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061146c602683610d04565b915061147782611410565b604082019050919050565b6000602082019050818103600083015261149b8161145f565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006114d8601f83610d04565b91506114e3826114a2565b602082019050919050565b60006020820190508181036000830152611507816114cb565b905091905056fea26469706673582212200ecb1823ea7851364af5cf5b067a643c1dc3e7ecdb847458072e02bf1342049664736f6c634300080b0033";

type OptimismUselessTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimismUselessTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimismUselessToken__factory extends ContractFactory {
  constructor(...args: OptimismUselessTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _a: PromiseOrValue<string>,
    _b: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OptimismUselessToken> {
    return super.deploy(
      _a,
      _b,
      overrides || {}
    ) as Promise<OptimismUselessToken>;
  }
  override getDeployTransaction(
    _a: PromiseOrValue<string>,
    _b: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_a, _b, overrides || {});
  }
  override attach(address: string): OptimismUselessToken {
    return super.attach(address) as OptimismUselessToken;
  }
  override connect(signer: Signer): OptimismUselessToken__factory {
    return super.connect(signer) as OptimismUselessToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimismUselessTokenInterface {
    return new utils.Interface(_abi) as OptimismUselessTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimismUselessToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OptimismUselessToken;
  }
}
