/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITssRewardContractInterface extends utils.Interface {
  functions: {
    "claimReward(uint256,uint32,address[])": FunctionFragment;
    "queryReward()": FunctionFragment;
    "updateReward(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawDust()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimReward"
      | "queryReward"
      | "updateReward"
      | "withdraw"
      | "withdrawDust"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queryReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDust",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDust",
    data: BytesLike
  ): Result;

  events: {
    "DistributeTssReward(uint256,uint256,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributeTssReward"): EventFragment;
}

export interface DistributeTssRewardEventObject {
  blockStartHeight: BigNumber;
  length: BigNumber;
  tssMembers: string[];
}
export type DistributeTssRewardEvent = TypedEvent<
  [BigNumber, BigNumber, string[]],
  DistributeTssRewardEventObject
>;

export type DistributeTssRewardEventFilter =
  TypedEventFilter<DistributeTssRewardEvent>;

export interface ITssRewardContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITssRewardContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawDust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimReward(
    _blockStartHeight: PromiseOrValue<BigNumberish>,
    _length: PromiseOrValue<BigNumberish>,
    _tssMembers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryReward(overrides?: CallOverrides): Promise<BigNumber>;

  updateReward(
    _blockID: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawDust(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawDust(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DistributeTssReward(uint256,uint256,address[])"(
      blockStartHeight?: null,
      length?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;
    DistributeTssReward(
      blockStartHeight?: null,
      length?: null,
      tssMembers?: null
    ): DistributeTssRewardEventFilter;
  };

  estimateGas: {
    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryReward(overrides?: CallOverrides): Promise<BigNumber>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawDust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimReward(
      _blockStartHeight: PromiseOrValue<BigNumberish>,
      _length: PromiseOrValue<BigNumberish>,
      _tssMembers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateReward(
      _blockID: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
