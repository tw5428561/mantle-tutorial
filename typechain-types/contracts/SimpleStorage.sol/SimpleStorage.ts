/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SimpleStorageInterface extends utils.Interface {
  functions: {
    "dumbSetValue(bytes32)": FunctionFragment;
    "msgSender()": FunctionFragment;
    "setValue(bytes32)": FunctionFragment;
    "setValueNotXDomain(bytes32)": FunctionFragment;
    "totalCount()": FunctionFragment;
    "txOrigin()": FunctionFragment;
    "value()": FunctionFragment;
    "xDomainSender()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dumbSetValue"
      | "msgSender"
      | "setValue"
      | "setValueNotXDomain"
      | "totalCount"
      | "txOrigin"
      | "value"
      | "xDomainSender"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dumbSetValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValueNotXDomain",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "txOrigin", values?: undefined): string;
  encodeFunctionData(functionFragment: "value", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xDomainSender",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "dumbSetValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setValueNotXDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "txOrigin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "value", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xDomainSender",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SimpleStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dumbSetValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    msgSender(overrides?: CallOverrides): Promise<[string]>;

    setValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValueNotXDomain(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    txOrigin(overrides?: CallOverrides): Promise<[string]>;

    value(overrides?: CallOverrides): Promise<[string]>;

    xDomainSender(overrides?: CallOverrides): Promise<[string]>;
  };

  dumbSetValue(
    newValue: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  msgSender(overrides?: CallOverrides): Promise<string>;

  setValue(
    newValue: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValueNotXDomain(
    newValue: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCount(overrides?: CallOverrides): Promise<BigNumber>;

  txOrigin(overrides?: CallOverrides): Promise<string>;

  value(overrides?: CallOverrides): Promise<string>;

  xDomainSender(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    dumbSetValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    msgSender(overrides?: CallOverrides): Promise<string>;

    setValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValueNotXDomain(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCount(overrides?: CallOverrides): Promise<BigNumber>;

    txOrigin(overrides?: CallOverrides): Promise<string>;

    value(overrides?: CallOverrides): Promise<string>;

    xDomainSender(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    dumbSetValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    msgSender(overrides?: CallOverrides): Promise<BigNumber>;

    setValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValueNotXDomain(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCount(overrides?: CallOverrides): Promise<BigNumber>;

    txOrigin(overrides?: CallOverrides): Promise<BigNumber>;

    value(overrides?: CallOverrides): Promise<BigNumber>;

    xDomainSender(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    dumbSetValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    msgSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setValue(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValueNotXDomain(
      newValue: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    txOrigin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    value(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xDomainSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
